public class Sierpinski {
    // Height of an equilateral triangle with the specified side length.
    public static double height(double length) {
        return ((length * Math.sqrt(3)) / 2);
    }

    // Draws a filled equilateral triangle with the specified side length
    // whose bottom vertex is (x, y).
    public static void filledTriangle(double x, double y, double length) {
        double height = height(length);
        double[] xarray = {x, x - (length / 2), x + (length / 2)};
        double[] yarray = {y, y + height, y + height};

        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.filledPolygon(xarray, yarray);

    }

    // Draws a Sierpinski triangle of order n, such that the largest filled
    // triangle has the specified side length and bottom vertex (x, y).
    // if n = 3, then number of triangles is equal to 3^2 + 3^1 + 3^0

    public static void sierpinski(int n, double x, double y, double length) {
        if (n == 0) return;
        filledTriangle(x, y, length);
        //System.out.print("Line 25: Was not returned");
        //System.out.println();
        double x0 = x - length / 2;
        double y0 = y;
        double x1 = x + length / 2;
        double y1 = y;
        double x2 = x;
        double y2 = y + height(length);
        double length1 = length / 2;

        //System.out.printf("Line 38: %d, %f, %f, %f", n - 1, x0, y0, length1);
        //System.out.println();
        sierpinski(n - 1, x0, y0, length1);
        //System.out.printf("Line 41: %d, %f, %f, %f", n - 1, x1, y1, length1);
        //System.out.println();
        sierpinski(n - 1, x1, y1, length1);
        //System.out.printf("Line 41: %d, %f, %f, %f", n - 1, x2, y2, length1);
        //System.out.println();
        sierpinski(n - 1, x2, y2, length1);

    }


    // Takes an integer command-line argument n;
    // draws the outline of an upwards equilateral triangle of length 1
    // whose bottom-left vertex is (0, 0) and bottom-right vertex is (1, 0);
    // and draws a Sierpinski triangle of order n that fits inside the outline.
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);

        // Create original polygon
        double[] x = {0, 1, 0.5};
        double[] y = {0, 0, Math.sqrt(3) / 2};
        StdDraw.setPenColor(StdDraw.GRAY);
        StdDraw.polygon(x, y);

        //filledTriangle(0.5, 0, 0.5);
        sierpinski(n, 0.5, 0, 0.5);

    }

}

public class audiocollage {
    // Returns a new array that rescales a[] by a factor of alpha.
    public static double[] amplify(double[] a, double alpha) {
        for (int i = 0; i < a.length; i++) {
            a[i] = a[i] * alpha;
        }
        return a;
    }

    // Returns a new array that is the reverse of a[].
    public static double[] reverse(double[] a) {
        double[] b = new double[a.length];
        for (int i = a.length - 1, j = 0; i >= 0; i--, j++) {
            b[j] = a[i];
        }
        return b;
    }

    // Returns a new array that is the concatenation of a[] and b[].
    public static double[] merge(double[] a, double[] b) {
        double[] c = new double[a.length + b.length];
        for (int i = 0; i < a.length; i++) {
            c[i] = a[i];
        }
        for (int i = 0, j = a.length; i < b.length; i++, j++) {
            c[j] = b[i];
        }
        return c;
    }

    // Returns a new array that is the sum of a[] and b[],
    // padding the shorter array with trailing 0s if necessary.
    public static double[] mix(double[] a, double[] b) {
        if (a.length < b.length) {
            for (int i = 0; i < a.length; i++) {
                b[i] = b[i] + a[i];
            }
            return b;
        } else {
            for (int i = 0; i < b.length; i++) {
                a[i] = a[i] + b[i];
            }
            return a;
        }
    }

    // Returns a new array that changes the speed of a[] by a factor of alpha.
    public static double[] changeSpeed(double[] a, double alpha) {
        double[] b = new double[(int) Math.floor(a.length / alpha)];
        for (int i = 0; i < b.length; i++) {
            b[i] = a[(int) Math.floor(i * alpha)];
        }
        return b;
    }

    private static double[] normalize(double[] a) {
        double max = Math.abs(a[0]);
        for (int i = 1; i < a.length; i++) {
            if (Math.abs(a[i]) > max) {
                max = Math.abs(a[i]);
            }
        }

        double x = 1 / max;
        for (int i = 0; i < a.length; i++) {
            a[i] = a[i] * x;
        }

        return a;
    }

    private static double[] loop(double[] a, int alpha) {
        double[] b = new double[a.length * alpha];
        for (int i = 0; i < alpha; i++) {
            for (int j = 0; j < a.length; j++) {
                b[(i * a.length) + j] = a[j];
            }
        }
        return b;
    }

    // Creates an audio collage and plays it on standard audio.
    // See below for the requirements.
    public static void main(String[] args) {
        double[] samples = StdAudio.read("beatbox.wav");
        double[] samples2 = StdAudio.read("exposure.wav");
        double[] samples3 = StdAudio.read("harp.wav");


        StdAudio.play(mix(loop(amplify(samples, 0.75), 5), samples2));
        StdAudio.play(mix(loop(amplify(samples, 0.75), 5), amplify(samples3, 0.3)));


    }
}
